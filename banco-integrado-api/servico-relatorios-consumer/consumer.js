const amqp = require('amqplib');

// URL de conex√£o com o RabbitMQ.
// Como o RabbitMQ est√° rodando em um cont√™iner Docker na mesma "m√°quina"
// do Codespaces, podemos nos conectar a ele usando 'localhost'.
const rabbitmqUrl = 'amqp://guest:guest@localhost:5672/';
const nomeDaFila = 'fila_de_relatorios';

async function iniciarConsumidor() {
    console.log('üîÑ Iniciando consumidor de relat√≥rios...');
    try {
        // 1. Conecta-se ao servidor RabbitMQ
        const connection = await amqp.connect(rabbitmqUrl);
        const channel = await connection.createChannel();
        console.log('‚úÖ Conectado ao RabbitMQ com sucesso!');

        // 2. Garante que a fila existe. Se n√£o existir, ela ser√° criada.
        // 'durable: true' significa que a fila sobreviver√° a reinicializa√ß√µes do RabbitMQ.
        await channel.assertQueue(nomeDaFila, { durable: true });

        console.log(`[*] Aguardando por pedidos de relat√≥rio na fila: "${nomeDaFila}". Para sair, pressione CTRL+C`);

        // 3. Configura o consumidor para a fila (estilo de Notifica√ß√£o de Evento/Listener)
        // 'channel.consume' registra uma fun√ß√£o de callback para ser executada
        // sempre que uma nova mensagem chegar na fila.
        channel.consume(nomeDaFila, (msg) => {
            if (msg !== null) {
                // Converte o conte√∫do da mensagem (que √© um Buffer) para string
                const conteudoMsg = msg.content.toString();
                console.log(`\nüì• [${new Date().toLocaleTimeString()}] Recebido pedido: ${conteudoMsg}`);

                // 4. Simula um trabalho demorado (ex: gerar um relat√≥rio complexo)
                console.log(`‚öôÔ∏è  Processando o relat√≥rio... (isso levar√° 5 segundos)`);
                setTimeout(() => {
                    console.log(`‚úÖ [${new Date().toLocaleTimeString()}] Relat√≥rio para "${conteudoMsg}" foi gerado com sucesso!`);
                    
                    // 5. Envia o Acknowledgement (ack) para o RabbitMQ.
                    // Isso informa ao Rabbit que a mensagem foi processada com sucesso
                    // e pode ser removida permanentemente da fila.
                    channel.ack(msg);
                }, 5000); // 5 segundos de simula√ß√£o
            }
        }, {
            // 'noAck: false' √© crucial. Garante que a mensagem s√≥ ser√° removida da fila
            // depois que chamarmos 'channel.ack()'. Se o nosso consumidor falhasse,
            // a mensagem voltaria para a fila para ser processada por outro.
            noAck: false 
        });

    } catch (error) {
        console.error('‚ùå Erro ao iniciar o consumidor:', error.message);
        // Tenta reconectar ap√≥s um tempo
        setTimeout(iniciarConsumidor, 5000);
    }
}

iniciarConsumidor();